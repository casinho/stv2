<?php

/**
 * UserIdentity represents the data needed to identity a user.
 * It contains the authentication method that checks if the provided
 * data can identity the user.
 */
class UserIdentity extends CUserIdentity
{
	
	const ERROR_ACTIVE_INVALID = 3;
	const ERROR_BANNED_INVALID = 4;
	
	private $_id;
	
	/**
	 * Authenticates a user.
	 * The example implementation makes sure if the username and password
	 * are both 'demo'.
	 * In practical applications, this should be changed to authenticate
	 * against some persistent user identity storage (e.g. database).
	 * @return boolean whether authentication succeeds.
	 */
	public function authenticate()	{
		
		$username 	= $this->username;
		$password	= $this->password;
		
		$user		= User::model()->find('user_nick=?',array($username));
		
		if($user === NULL) {
			$this->errorCode = self::ERROR_USERNAME_INVALID;
		} elseif(!$user->validatePassword($password)) {
			$this->errorCode = self::ERROR_PASSWORD_INVALID;
		} elseif(!$user->checkActive()) {
			$this->errorCode = self::ERROR_ACTIVE_INVALID;
		} elseif(!$user->checkBanned()) {
			$this->errorCode = self::ERROR_BANNED_INVALID;			
		} else {
			$this->_id = $user->user_id;
			$this->errorCode = self::ERROR_NONE;
		}
		
		return !$this->errorCode;
	}
	
 	public function getId() { 
 		return $this->_id; 
 	}
}