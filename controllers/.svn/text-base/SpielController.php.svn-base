<?php
class SpielController extends Controller {
    
    /**
     * @return array action filters
     */
    public function filters()
    {
        return array(
                'accessControl', // perform access control for CRUD operations
                'postOnly + delete', // we only allow deletion via POST request
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules()
    {
	    return array(
	            array('allow',
	                    'actions'=>array('index'),
	                    'users'=>array('*'),
	            ),
	            array('allow',
	                    'actions'=>array('create', 'update', 'admin', 'delete', 'view', 'delete'),
	                    'roles'=>array('super-admin'),
	            ),
	            array('deny',  // deny all users
	                    'users'=>array('*'),
	            ),
	    );
	}
	
	public function actionIndex() {
        $saisonId 					= Saison::model()->getAktuelleSaisonId(Yii::app()->params['wettbewerbId']);
        $spieltagsAnzeige 			= WTFunctions::getDatenFuerSpieltagsAnzeigeBySaisonId($saisonId, false, true);
        $aktuelleSpiele 			= Spiel::model()->getSpieleBySaisonAndSpieltag($saisonId, $spieltagsAnzeige['gewaehlterSpieltag']);
        
		$spiel	= Spiel::Model()->getSingleSpiel(Yii::app()->request->getParam('spiel_id'));
		$spiel->scorer 				= SpielScorer::Model()->getScorerSpiel($spiel->spiel_id);
		$spiel->schiedsrichter 		= Schiedsrichter::Model()->findByPk($spiel->schiedsrichter_id);
		$spiel->aufstellung 		= SpielAufstellung::Model()->getAufstellungSpiel($spiel->spiel_id,$spiel->saison_id);
		$spiel->bank 				= SpielAufstellung::Model()->getBankSpiel($spiel->spiel_id,$spiel->saison_id);
		
		$spiel->setRelevanteThemen();
		
		$statistik_h = SpielStatistik::Model()->getStatistikSpiel($spiel->spiel_id,$spiel->saison_id,$spiel->verein_id_h);
		$statistik_g = SpielStatistik::Model()->getStatistikSpiel($spiel->spiel_id,$spiel->saison_id,$spiel->verein_id_g);
		
		if(!empty($statistik_h) && !empty($statistik_g)) {
			foreach($spiel->labels as $k => $v) {
				if($statistik_h[$k]==0 && $statistik_g[$k]==0) {
					unset($spiel->labels[$k]);
				} else {
					$max_width = 78;
					$prozent = 0;
					$width_h = 0;
					$anteile = 0;
					$width_g = 0;
					if($v['werte']=='prozentual') {
    					$width_h 	= ceil(($statistik_h[$k] * $max_width)/100);
    					$width_g 	= ceil(($statistik_g[$k] * $max_width)/100);
					} else {
						if($statistik_h[$k] > $statistik_g[$k]) {
							$width_h 	= $max_width;
							$prozent 	= ceil(($statistik_g[$k] * 100)/$statistik_h[$k]);
							$width_g 	= ceil(($prozent * $width_h)/100);							
						} elseif($statistik_h[$k] == $statistik_g[$k]) {
							$width_h 	= $max_width;
							$width_g 	= $max_width;
						} else {
							$width_g 	= $max_width;
							$prozent 	= ceil(($statistik_h[$k] * 100)/$statistik_g[$k]);
							$width_h	= ceil(($prozent * $width_g)/100);
						}
					}
					$spiel->labels[$k]['data'] = array(
						'data_h' 	=> $statistik_h[$k], 
						'width_h' 	=> $width_h, 
						'data_g' 	=> $statistik_g[$k], 
						'width_g' 	=> $width_g
					);
				}
			}
		}
		$this->breadcrumbs = array(
			$spiel->verein_h->vereinsname.' - '.$spiel->verein_g->vereinsname
		);
  		
		$viewparams = array(
		        'saisonId'             => $saisonId,
		        'spieltagsAnzeige'     => $spieltagsAnzeige,
		        'aktuelleSpiele'       => $aktuelleSpiele,
		        'spiel'                => $spiel,
		);
		
		$this->render('index',$viewparams);
	}
    /**
     * Displays a particular model.
     * @param integer $id the ID of the model to be displayed
     */
    public function actionView($id)
    {
        $this->render('view',array(
            'model'=>$this->loadModel($id),
        ));
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate()
    {
        $model=new Spiel;

        // Uncomment the following line if AJAX validation is needed
        // $this->performAjaxValidation($model);

        if(isset($_POST['Spiel']))
        {
            $model->attributes=$_POST['Spiel'];
            if($model->save())
                $this->redirect(array('view','id'=>$model->spiel_id));
        }

        $this->render('create',array(
            'model'=>$model,
        ));
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id)
    {
        $model=$this->loadModel($id);

        // Uncomment the following line if AJAX validation is needed
        // $this->performAjaxValidation($model);

        if(isset($_POST['Spiel']))
        {
            $model->attributes=$_POST['Spiel'];
            if($model->save())
                $this->redirect(array('view','id'=>$model->spiel_id));
        }

        $this->render('update',array(
            'model'=>$model,
        ));
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id)
    {
        $this->loadModel($id)->delete();

        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
        if(!isset($_GET['ajax']))
            $this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
    }

    /**
     * Manages all models.
     */
    public function actionAdmin()
    {
        $model=new Spiel('search');
        $model->unsetAttributes();  // clear any default values
        if(isset($_GET['Spiel']))
            $model->attributes=$_GET['Spiel'];

        $this->render('admin',array(
            'model'=>$model,
        ));
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer the ID of the model to be loaded
     */
    public function loadModel($id)
    {
        $model=Spiel::model()->findByPk($id);
        if($model===null)
            throw new CHttpException(404,'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param CModel the model to be validated
     */
    protected function performAjaxValidation($model)
    {
        if(isset($_POST['ajax']) && $_POST['ajax']==='spiel-form')
        {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }
} 