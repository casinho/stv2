<?php

/**
 * This is the model class for table "forum_10_beitrag".
 *
 * The followings are the available columns in table 'forum_10_beitrag':
 * @property string $beitrag_id
 * @property string $beitrag_id_alt
 * @property string $user_id
 * @property string $user_nick
 * @property string $thema_id
 * @property string $titel
 * @property string $nachricht
 * @property string $erstelltzeit
 * @property string $bearbeitetzeit
 * @property string $bearbeitet_user_id
 */
class ForumBeitrag extends CActiveRecord {
	protected $boardId = NULL;
	private $_md;
	
	public $bearbeitet_user_nick;
	public $page;
	
	public function __construct($scenario, $boardId = null) {
		$this->boardId = $boardId;
		parent::__construct($scenario);
	}
	
	/**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return ForumBeitrag the static model class
	 */
	public static function model($className=__CLASS__) {
		$className = (is_null($className)) ? __CLASS__ : $className;
		$params = func_get_args(); 
		$new_table_id = (is_array($params) && isset($params[1])) ? $params[1] : NULL;

		/*
		 * Wir koennen hier nicht die Parent-Methode aufrufen,
		 * da wir einen zweiten Parameter benoetigen.
		 * Die folgenden Zeilen sind aber auch zu finden in parent::model();
		 */
		$model = new $className(null, $new_table_id);
		$model->_md=new CActiveRecordMetaData($model);
        $model->attachBehaviors($model->behaviors());
		return $model;
	}
	
	protected function instantiate($attributes)	{
		$class=get_class($this);
		$model=new $class(null, $this->boardId);
		return $model;
	}
	
	public function getMetaData() {
		if($this->_md!==null) {
			return $this->_md;
		} else {
			return $this->_md=self::model(get_class($this), $this->boardId)->_md;
		}
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName() {
		return 'forum_'.$this->boardId.'_beitrag';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules() {
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('user_id, user_nick, thema_id, nachricht', 'required'),
			array('nachricht', 'length', 'min'=>2),
			array('titel', 'length', 'max'=>120),
			array('user_nick', 'length', 'max'=>100),
			array('titel', 'length', 'max'=>255),
			//array('nachricht, erstelltzeit, bearbeitetzeit', 'safe'),
			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
			array('beitrag_id, beitrag_id_alt, user_id, user_nick, thema_id, titel, nachricht, erstelltzeit, bearbeitetzeit, bearbeitet_user_id', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations() {
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'ersteller' => array(
				self::HAS_ONE,	'User', array('user_id' => 'user_id'), 'joinType' => 'LEFT JOIN'
			),
			
			'bearbeiter' => array(
				self::HAS_ONE,	'User', array('bearbeitet_user_id' => 'user_id'), 'joinType' => 'LEFT JOIN'
			),
		);	
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels() {
		return array(
			'beitrag_id' => 'Beitrag',
			'beitrag_id_alt' => 'Beitrag Id Alt',
			'user_id' => 'User',
			'user_nick' => 'User Nick',
			'thema_id' => 'Thema',
			'titel' => 'Titel',
			'nachricht' => 'Nachricht',
			'erstelltzeit' => 'Erstelltzeit',
			'bearbeitetzeit' => 'Bearbeitetzeit',
			'bearbeitet_user_id' => 'Bearbeitet User',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search() {
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('beitrag_id',$this->beitrag_id,true);
		$criteria->compare('beitrag_id_alt',$this->beitrag_id_alt,true);
		$criteria->compare('user_id',$this->user_id,true);
		$criteria->compare('user_nick',$this->user_nick,true);
		$criteria->compare('thema_id',$this->thema_id,true);
		$criteria->compare('titel',$this->titel,true);
		$criteria->compare('nachricht',$this->nachricht,true);
		$criteria->compare('erstelltzeit',$this->erstelltzeit,true);
		$criteria->compare('bearbeitetzeit',$this->bearbeitetzeit,true);
		$criteria->compare('bearbeitet_user_id',$this->bearbeitet_user_id,true);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
	
/*	
	protected function afterFind() {
		parent::afterFind();
		
		if($this->bearbeitet_user_id != 0) {
			$user = User::Model()->findByPk($this->thema_id);
			$this->bearbeitet_user_nick = $user->user_nick;
		}
	}
*/	
	
	protected function afterSave() {
		parent::afterSave();
		
		if($this->isNewRecord) {
			ForumThema::Model(null,$this->boardId)->aktualisiereLetztesThema($this->thema_id);
			$this->aktualisiereBeitragsCounter();
			ForumNeueBeitraege::model()->aktualisiereAktuelleBeitraege($this->boardId,$this->getPrimaryKey());
			$this->isNewRecord = false;
		}
		$this->setAnzahlSeiten($this->getPrimaryKey());
	}
	
	private function aktualisiereBeitragsCounter() {
		$user = User::model()->findByPk($this->user_id);
		$user->anzahl_beitraege+=1;
		$user->save(false);		
		return true;		
	}
	
	public function setAnzahlSeiten($beitrag_id = 0) {
		
		$attributes['thema_id']  = $this->thema_id;

		if($this->beitrag_id != 0) {
			$conditions = 'beitrag_id <= '.$this->beitrag_id;
		} else {
			$conditions = 0;
		}
		$anzahl	= $this->countByAttributes($attributes,$conditions);
		//$anzahl = $this->anzahl_antworten;
		
		if($anzahl < Yii::app()->params['page_size_beitrag']) {
			$this->page = 1;
		} else {
			$this->page = ceil($anzahl/Yii::app()->params['page_size_beitrag']);
		}
	}
	
	
	protected function afterDelete() {
		ForumThema::Model(null,$this->boardId)->aktualisiereLetztesThema($this->thema_id);
		parent::afterDelete();
	}	
	
    public static function getBeitraege($thema_id) {
		$criteria = new CDbCriteria;
	 	$criteria->with 		= array('absender');
	 	$criteria->select 		= array('beitrag_id', 'user_id', 'user_nick', 'thema_id', 'titel', 'nachricht', 'erstelltzeit', 'ersteller.*');
 		$criteria->condition 	= 'thema_id = :thema_id';
	 	$criteria->params 		= array(':thema_id' => $thema_id,);
	 	$criteria->order 		= 'erstelltzeit ASC';

	
		return $beitraege;
	}	
	
}